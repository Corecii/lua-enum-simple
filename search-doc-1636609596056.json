[{"title":"LuaEnumCollection","type":0,"sectionRef":"#","url":"api/LuaEnumCollection","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"LuaEnumCollection","url":"api/LuaEnumCollection#functions","content":" "},{"title":"fromModules","type":1,"pageTitle":"LuaEnumCollection","url":"api/LuaEnumCollection#fromModules","content":"&lt;/&gt; LuaEnumCollection.fromModules( ancestor: Instance, representation: Representation? ) → () Builds an EnumCollection tree from an ancestor containing modules and folders.  "},{"title":"is","type":1,"pageTitle":"LuaEnumCollection","url":"api/LuaEnumCollection#is","content":"&lt;/&gt; LuaEnumCollection.is(thing: any?) → ( boolean, string ) Returns whether thing is a LuaEnumCollection, plus a reason message if it is not.  "},{"title":"new","type":1,"pageTitle":"LuaEnumCollection","url":"api/LuaEnumCollection#new","content":"&lt;/&gt; LuaEnumCollection.new(children: {[string]: (LuaEnum | LuaEnumCollection)}) → LuaEnumCollection Creates a new collection "},{"title":"LuaEnum","type":0,"sectionRef":"#","url":"api/LuaEnum","content":"","keywords":""},{"title":"Types","type":1,"pageTitle":"LuaEnum","url":"api/LuaEnum#types","content":" "},{"title":"Representation","type":1,"pageTitle":"LuaEnum","url":"api/LuaEnum#Representation","content":"&lt;/&gt; type Representation = &quot;Id&quot; | &quot;Name&quot; | &quot;ValueId&quot; | &quot;Value&quot; | &quot;Symbol&quot; A way that an enum item can be represented. Examples, with an enum named Animal and item Dog = 1 Id: &quot;Animal.Dog&quot; Name: &quot;Dog&quot; ValueId: &quot;Animal.1&quot; Value: 1 Symbol: A userdata with tostring(symbol) == &quot;&lt;Symbol Animal.Dog&gt;&quot; Value is best for long-term saveable data since you can keep values the same between versions.\\ Id is best for readability.\\ Symbol is best for being a unique value, but it can't be transferred over the network or saved. Sadly, there is no one-size-fits-all enum item representation. Instead of deciding which is best myself, I've written this module to work with common representations. I sure wish Lua had built-in enum types! "},{"title":"Functions","type":1,"pageTitle":"LuaEnum","url":"api/LuaEnum#functions","content":" "},{"title":"getItemName","type":1,"pageTitle":"LuaEnum","url":"api/LuaEnum#getItemName","content":"&lt;/&gt; LuaEnum.getItemName( enum: LuaEnum, item: Item&lt;enum&gt; ) → string Returns the name of an item in enum.  "},{"title":"getName","type":1,"pageTitle":"LuaEnum","url":"api/LuaEnum#getName","content":"&lt;/&gt; LuaEnum.getName(enum: LuaEnum) → string Returns the name of this enum used when creating it.  "},{"title":"is","type":1,"pageTitle":"LuaEnum","url":"api/LuaEnum#is","content":"&lt;/&gt; LuaEnum.is(thing: any?) → ( boolean, string ) Returns whether thing is a LuaEnum, plus a reason message if it is not.  "},{"title":"isItem","type":1,"pageTitle":"LuaEnum","url":"api/LuaEnum#isItem","content":"&lt;/&gt; LuaEnum.isItem( enum: LuaEnum, thing: any? ) → ( boolean, string ) Returns whether thing is an item of enum, plus a reason message if it is not.  "},{"title":"isItemName","type":1,"pageTitle":"LuaEnum","url":"api/LuaEnum#isItemName","content":"&lt;/&gt; LuaEnum.isItemName( enum: LuaEnum, thing: any? ) → ( boolean, string ) Returns whether thing is an item name of enum, plus a reason message if it is not.  "},{"title":"new","type":1,"pageTitle":"LuaEnum","url":"api/LuaEnum#new","content":"&lt;/&gt; LuaEnum.new( enumName: string,-- The name of the Enum items: {[string]: number},-- The enum's items representation: Representation?-- (default: &quot;Id&quot;) ) → LuaEnum Creates a new LuaEnum. "}]